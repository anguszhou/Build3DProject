package xjtu.citi.web;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;



import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import org.apache.struts.actions.MappingDispatchAction;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.apache.struts.actions.MappingDispatchAction;

import com.mysql.jdbc.ResultSet;


import xjtu.citi.dao.IBankUserDao;
import xjtu.citi.dao.IParameterDao;
import xjtu.citi.dao.IWarnParameterDao;
import xjtu.citi.entity.Account;
import xjtu.citi.entity.BankUser;
import xjtu.citi.entity.Parameter;
import xjtu.citi.entity.WarnParameter;
import xjtu.citi.exception.ManagerUserException;
import xjtu.citi.impl.BankUserDaoImpl;
import xjtu.citi.impl.ParameterDaoImpl;
import xjtu.citi.impl.WarnInfoDaoImpl;
import xjtu.citi.impl.WarnParameterDaoImpl;




import xjtu.citi.entity.BankUser;
import xjtu.citi.dao.IBankUserDao;
import xjtu.citi.impl.BankUserDaoImpl;
import xjtu.citi.entity.UserType;
import xjtu.citi.exception.ManagerUserException;
import xjtu.citi.dao.IUserTypeDao;
import xjtu.citi.impl.UserTypeImpl;
import xjtu.citi.util.HibernateUtils;

public class BankUserHandler extends MappingDispatchAction{

	public ActionForward login(ActionMapping mapping, ActionForm form,
			HttpServletRequest req, HttpServletResponse resp)
			throws Exception {
		
		IBankUserDao dao = new BankUserDaoImpl();
		BankUser user = null;
		IParameterDao dao1 = new ParameterDaoImpl();
		IWarnParameterDao dao2 = new WarnParameterDaoImpl();
		
		try {			
			user = dao.login(req.getParameter("name"), req.getParameter("password"));						
			
		} catch (ManagerUserException e) {
			
			e.printStackTrace();
		}
		if(user != null)
		{
			req.getSession().setAttribute("user", user);
			if(user.getUsertype().getId() == 1){         //登录角色为信贷员
				return mapping.findForward("success1");
			}else if(user.getUsertype().getId() == 2){   //登录角色为风险评估员
				Parameter parameter = dao1.find();
				WarnParameter warnparameter = dao2.find();
				req.getSession().setAttribute("parameter", parameter);
				req.getSession().setAttribute("warnparameter", warnparameter);
				return mapping.findForward("success2");
			}else if(user.getUsertype().getId() == 3){   //登录角色为后台管理员
				return mapping.findForward("success3");
			}else 
				return mapping.findForward("success4");  //登录角色为企业用户
		}
		else
		{
			req.setAttribute("message", "用户名或密码有误，请重新登录！");
			req.setAttribute("success", false);
			return mapping.findForward("success");
		}		
	}
	

	public ActionForward peopleAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest req, HttpServletResponse resp)
	{
		IBankUserDao dao = new BankUserDaoImpl();
		BankUser user = new BankUser();
		
		user.setName(req.getParameter("name"));
		user.setUsername(req.getParameter("userName"));
		user.setPassword(req.getParameter("password"));
		user.setDepartment(req.getParameter("department"));
		user.setWorkNum(req.getParameter("worknum"));
		
		IUserTypeDao typedao = new UserTypeImpl();
		UserType usertype=new UserType();


	    usertype=typedao.findByType(req.getParameter("usertype"));
		System.out.println(req.getParameter("usertype"));
		user.setUsertype(usertype);
		try {
			System.out.println(usertype.getId());
			dao.add(user);
			
		} catch (ManagerUserException e) {
			
			e.printStackTrace();
			req.setAttribute("message", "抱歉，注册失败！");
			req.setAttribute("success", false);
			return mapping.findForward("success");
		}

		req.getSession().setAttribute("user", user);
		
		req.getSession(true).setAttribute("user",user);	
		req.setAttribute("message", "恭喜，注册成功！");
		req.setAttribute("success", true);
		return mapping.findForward("success");
	}
	
	public ActionForward parameter(ActionMapping mapping, ActionForm form,
			HttpServletRequest req, HttpServletResponse resp) throws ParseException
	{	
		IParameterDao dao = new ParameterDaoImpl();
		Parameter parameter = new Parameter();
		parameter = (Parameter) req.getSession().getAttribute("parameter");
		
		parameter.setCashflow(Double.parseDouble(req.getParameter("cashflow")));
		parameter.setRegistfund(Double.parseDouble(req.getParameter("registfund")));
		parameter.setListedcomp(Double.parseDouble(req.getParameter("listedcomp")));
		parameter.setCorecomp(Double.parseDouble(req.getParameter("corecomp")));
		parameter.setAin(Double.parseDouble(req.getParameter("ain")));
		parameter.setAout(Double.parseDouble(req.getParameter("aout")));
		parameter.setBin(Double.parseDouble(req.getParameter("bin")));
		parameter.setBout(Double.parseDouble(req.getParameter("bout")));
		
		SimpleDateFormat fordate=new SimpleDateFormat("yyyy-MM-dd");
		Date date = fordate.parse(req.getParameter("modifiedtime"));
		parameter.setTime(date);
		
		dao.add(parameter);
		
		req.getSession().setAttribute("parameter",parameter);
		
		return mapping.findForward("success");
	}
	
	public ActionForward backup(ActionMapping mapping, ActionForm form,
			HttpServletRequest req, HttpServletResponse resp) throws Exception
	{
		try {  
	        Runtime rt = Runtime.getRuntime();  
	  
	        String mysql = "mysqldump -uroot -p123456 db";  
	  
	        // 调用 mysql 的 cmd:  
	        Process child = rt  
	        .exec("cmd /c "+mysql);// 设置导出编码为utf8。这里必须是utf8  
	  
	        // 把进程执行中的控制台输出信息写入.sql文件，即生成了备份文件。注：如果不对控制台信息进行读出，则会导致进程堵塞无法运行  
	        InputStream in = child.getInputStream();// 控制台的输出信息作为输入流  
	  
	        InputStreamReader xx = new InputStreamReader(in, "utf8");// 设置输出流编码为utf8。这里必须是utf8，否则从流中读入的是乱码  
	  
	        String inStr;  
	        StringBuffer sb = new StringBuffer("");  
	        String outStr;  
	        // 组合控制台输出信息字符串  
	        BufferedReader br = new BufferedReader(xx);  
	        while ((inStr = br.readLine()) != null) {  
	            sb.append(inStr + "\r\n");  
	        }  
	        outStr = sb.toString();  
	  
	        // 要用来做导入用的sql目标文件：  
	        FileOutputStream fout = new FileOutputStream(  
	                "e:/db.sql");  
	        OutputStreamWriter writer = new OutputStreamWriter(fout, "utf8");  
	        writer.write(outStr);  
	        // 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免  
	        writer.flush();  
	  
	        // 别忘记关闭输入输出流  
	        in.close();  
	        xx.close();  
	        br.close();  
	        writer.close();  
	        fout.close();  
	  
	        System.out.println("/* Output OK! */");  
	                      
	        String error="备份成功!";  
	          
	        StrError = (new String(error.getBytes("ISO-8859-1"),"UTF-8"));    
	  
	    } catch (Exception e) {  
	        e.printStackTrace();  
	        StrError=StrError+"failure!<br>";  
	    }  
		return mapping.findForward("backup");
	}
}

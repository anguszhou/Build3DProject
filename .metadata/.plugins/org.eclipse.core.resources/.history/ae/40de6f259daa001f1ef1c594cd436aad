package xjtu.citi.impl;

import java.util.Collection;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import xjtu.citi.util.HibernateUtils;

import xjtu.citi.dao.IBankUserDao;
import xjtu.citi.entity.BankUser;
import xjtu.citi.exception.ManagerUserException;

public class BankUserDaoImpl implements IBankUserDao {

	public void add(BankUser user) throws ManagerUserException {
		
		Session   session = null;
		Transaction  tran = null;
		try{
			session = HibernateUtils.getSession();
			tran = session.beginTransaction();
			session.save(user);
			tran.commit();
		}catch(Exception e){
			tran.rollback();
			e.printStackTrace();
			throw  new ManagerUserException(e.getMessage());
		}finally{
			session.close();
		}
	}

	public void delete(BankUser user) throws ManagerUserException {
		
		Session   session = null;
		Transaction  tran = null;
		try{
			session = HibernateUtils.getSession();
			tran = session.beginTransaction();
			session.delete(user);
			tran.commit();
		}catch(Exception e){
			tran.rollback();
			e.printStackTrace();
			throw  new ManagerUserException(e.getMessage());
		}finally{
			session.close();
		}
	}

	public Collection find(int start, int max) throws ManagerUserException {
		
		Session session = null;
		Transaction tran = null;
		Collection list = null;
		try {
			session = HibernateUtils.getSession();
			tran = session.beginTransaction();
			Query query = session.createQuery(" from BankUser ");
			query.setFirstResult(start);
			query.setMaxResults(max);
			list = query.list();
			tran.commit();
		} catch (Exception e) {
			tran.rollback();
			e.printStackTrace();
		} finally {
			session.close();
			
		}
		return list;
	}

	public Collection findAll() throws ManagerUserException {
		
		Session   session = null;
		Transaction  tran = null;
		Collection list = null;
		try{
			session = HibernateUtils.getSession();
			tran = session.beginTransaction();
			list = session.createQuery(" from  BankUser ").list();
			tran.commit();
		}catch(Exception e){
			tran.rollback();
			e.printStackTrace();
			throw  new ManagerUserException(e.getMessage());
		}finally{
			session.close();			
		}
		return  list;
		
	}

	public BankUser findById(Integer id) throws ManagerUserException {
		
		Session   session = null;
		Transaction  tran = null;
		BankUser  user = null;
		try{
			session = HibernateUtils.getSession();
			tran = session.beginTransaction();
			user = (BankUser) session.get( BankUser.class, id);	
			System.out.println("根据ID进行查询");
			tran.commit();
		}catch(Exception e){
			tran.rollback();
			e.printStackTrace();
			throw  new ManagerUserException(e.getMessage());
		}finally{
			session.close();			
		}
		return  user;
	}

	public int getTotal() throws ManagerUserException {
		
		Session session = null;
		Transaction tran = null;
		int total = 0;
		try {
			session = HibernateUtils.getSession();
			tran = session.beginTransaction();
			total = session.createQuery("From  BankUser").list().size();			
			tran.commit();
		} catch (Exception e) {
			tran.rollback();
			e.printStackTrace();
		} finally {
			session.close();
			
		}
		return total;
	}

	public BankUser login(String name, String passwd)
			throws ManagerUserException {
		
		Session session = null;
		Transaction  tran = null;
		BankUser user = new BankUser();
		try{
			session = HibernateUtils.getSession();
			tran = session.beginTransaction();
			user=(BankUser)session.createQuery("from BankUser b where b.username=:name and b.password =:passwd").setString("name",name).setString("passwd",passwd).uniqueResult();
			tran.commit();
		}catch(Exception e){
			tran.rollback();
			e.printStackTrace();
			throw new ManagerUserException(e.getMessage() );
		}finally{
			session.close();			
		}
		return  user;
	}

	public List login(String name) throws ManagerUserException {
		
		Session session = null;
		Transaction  tran = null;
		List userList = null;
		try{
			session = HibernateUtils.getSession();
			tran = session.beginTransaction();
			Query query = session.createQuery("select user from BankUser user where user.username='"+name+"'");
			
			userList = query.list();
			
			tran.commit();
		}catch(Exception e){
			tran.rollback();
			e.printStackTrace();
			throw new ManagerUserException(e.getMessage() );
		}finally{			
			session.close();			
		}
		return  userList;
	}

	public Collection search(BankUser user) throws ManagerUserException {
		
		Session session = null;
		Transaction tran = null;
		Collection list = null;
		try {
			session = HibernateUtils.getSession();
			tran = session.beginTransaction();
			Criteria crit = session.createCriteria(BankUser.class);
			
			if (user.getName().equals("")) {
				crit.add(Restrictions.like("name", "%"));
			} else {
				crit.add(Restrictions.like("name", "%" + user.getName()
						+ "%"));
			}
			
			list = crit.list();
			tran.commit();
		} catch (Exception e) {
			e.printStackTrace();
			tran.rollback();
		} finally {
			session.close();
			
		}
		return list;
	}

	public void update(BankUser user) throws ManagerUserException {
		
		Session   session = null;
		Transaction  tran = null;
		try{
			session = HibernateUtils.getSession();
			tran = session.beginTransaction();
			session.update(user);
			System.out.println(user.getName());
			System.out.println(user.getPassword());
			System.out.println("更新");
			tran.commit();
		}catch(Exception e){
			tran.rollback();
			e.printStackTrace();
			throw  new ManagerUserException(e.getMessage());
		}finally{
			session.close();
		}
	}
	public static void main(String[] args) {
		IBankUserDao dao = new BankUserDaoImpl();
		BankUser user = new BankUser();
		
		//测试add函数
		/*UserType usertype = new UserType(2);
		user.setName("西安交大");
		user.setUsername("maona");
		user.setPassword("12345");
		user.setWorkNum("233");
		user.setDepartment("suib");
		user.setUsertype(usertype);
		try {
			dao.add(user);
		} catch (ManagerUserException e) {
			
			e.printStackTrace();
		}*/
		
		//测试findById函数和update函数
		/*try {
			user = dao.findById(1);
		} catch (ManagerUserException e1) {
			
			e1.printStackTrace();
		}
		user.setPassword("1234");
		try {
			dao.update(user);
		} catch (ManagerUserException e) {
			
			e.printStackTrace();
		}*/
		
		//测试findAll函数
		/*try {
			Collection list = dao.findAll();
			System.out.println(list.size()+"所有的银行用户");
		} catch (ManagerUserException e) {
			
			e.printStackTrace();
		}*/
		
		//测试login函数
		/*try {
			dao.login("nana", "1234");
		} catch (ManagerUserException e) {
			
			e.printStackTrace();
		}*/
		
		//测试delete函数
		/*try {
			user = dao.findById(2);
			dao.delete(user);
			
		} catch (ManagerUserException e) {
			
			e.printStackTrace();
		}*/
	}
}
